%define ITR_ARRAY_CONFIG default_int_array.klt

%define ITR_TYPE INTEGER
%define ARRAY_SIZE 10

%mode push
%mode string QQQ "`" "`" "\\"

%define ENABLE_REGMAPPING
%define REGMAPPGET `
registerstp__get_karel_int('classname', 'int_', 2)
`

%define define_itr_private_headers(parent) `
declare_member(parent,set_null_array,parent,stnla)
ROUTINE set_null_array(i : INTEGER) FROM parent
declare_member(parent,set_null_nde,parent,stnln)
ROUTINE set_null_nde FROM parent
`

%define define_itr_headers(parent) `
declare_member(parent,is_null,parent,isnll)
ROUTINE is_null : BOOLEAN FROM parent
`

%mode pop

%mode push
%mode string QQQ "`" "`" "\\"
%define define_null_type(parent) `
ROUTINE set_null_nde
  BEGIN
    SET_UNINIT_I('parent', 'nde')
  END set_null_nde

ROUTINE set_null_array
  BEGIN
    SET_UNINIT_I('parent', 'this[' + i_to_s(i) + ']')
  END set_null_array
`

%define define_is_null(parent) `
ROUTINE is_null -- : BOOLEAN
  BEGIN
    IF (index > length) OR (index < 1) THEN
      set_null_nde
    ENDIF

    RETURN(UNINIT(nde))
  END is_null
`

--define tp interface with iterator
%define ITER_TP_VARS `
  func_ : INTEGER
  int_ : ITR_TYPE
`

%define ITER_TP_INTERFACE `
  --tpe class function
  func_ = tpe__get_int_arg(1)

  SELECT func_ OF
    CASE(ITER_RESET):
      new
    CASE(ITER_PUSH):
      push(tpe__get_int_arg(2))
    CASE(ITER_POP):
      int_ = pop
      REGMAPPGET
    CASE(ITER_INSERT):
      insert(tpe__get_int_arg(3), tpe__get_int_arg(2))
    CASE(ITER_GET):
      set_index(tpe__get_int_arg(2))
      int_ = get
      REGMAPPGET
    CASE(ITER_NEXT):
      int_ = next
      REGMAPPGET
    CASE(ITER_PREV):
      int_ = prev
      REGMAPPGET
    CASE(ITER_NULL):
      registers__set_boolean(tpe__get_int_arg(2), is_null)
    ELSE:
  ENDSELECT
`

%mode pop