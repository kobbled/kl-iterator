%define ITR_PATH_CONFIG default_int_path.klt

%define ITR_TYPE t_INTEGER
%define ITR_UNWRAP_TYPE INTEGER


%mode push
%mode string QQQ "`" "`" "\\"

%define ENABLE_REGMAPPING
%define REGMAPPGET `
registerstp__get_karel_int('classname', 'int_', 2)
`

%define define_itr_private_headers `
`

%define define_itr_headers(parent) `
declare_member(parent,is_null,parent,isnll)
ROUTINE is_null : BOOLEAN FROM parent
declare_member(parent,wrap,parent,wrap)
ROUTINE wrap(int : ITR_UNWRAP_TYPE) FROM parent
declare_member(parent,wrap_insert,parent,wrpin)
ROUTINE wrap_insert(index_ : INTEGER; int : ITR_UNWRAP_TYPE) FROM parent
declare_member(parent,unwrap,parent,unwrp)
ROUTINE unwrap : ITR_UNWRAP_TYPE FROM parent
declare_member(parent,unwrap_pop,parent,uwpop)
ROUTINE unwrap_pop : ITR_UNWRAP_TYPE FROM parent
declare_member(parent,unwrap_next,parent,uwnxt)
ROUTINE unwrap_next : ITR_UNWRAP_TYPE FROM parent
declare_member(parent,unwrap_prev,parent,uwprv)
ROUTINE unwrap_prev : ITR_UNWRAP_TYPE FROM parent
declare_member(parent,unwrap_from,parent,unwfm)
ROUTINE unwrap_from(n : ITR_TYPE) : ITR_UNWRAP_TYPE FROM parent
`

%mode pop

%mode push
%mode string QQQ "`" "`" "\\"
%define define_null_type(parent) `
ROUTINE set_null : ITR_TYPE
  VAR
    uninitnde :  ITR_TYPE
  BEGIN
    nde = uninitnde
    RETURN(uninitnde)
  END set_null
`

%define define_is_null(parent) `
ROUTINE is_null -- : BOOLEAN
  BEGIN
    IF (index > PATH_LEN(this)) OR (index < 1) THEN
      nde = set_null
    ENDIF

    RETURN(UNINIT(nde.v))
  END is_null

ROUTINE is_null_(n : ITR_TYPE) : BOOLEAN
  BEGIN
    RETURN(UNINIT(n.v))
  END is_null_
`

%define define_wrap(parent) `
ROUTINE wrap
  VAR
    n : ITR_TYPE
  BEGIN
    n.v = int
    push(n)
  END wrap
`

%define define_wrap_insert(parent) `
ROUTINE wrap_insert
  VAR
    n : ITR_TYPE
  BEGIN
    n.v = int
    insert(index_, n)
  END wrap_insert
`

%define define_unwrap_pop(parent) `
ROUTINE unwrap_pop
  VAR
    n : ITR_TYPE
  BEGIN
    n = pop

    IF is_null_(n) THEN
      RETURN(n.v)
    ENDIF
    
    RETURN(n.v)
  END unwrap_pop
`

%define define_unwrap_next(parent) `
ROUTINE unwrap_next
  VAR
    n : ITR_TYPE
  BEGIN
    n = next

    IF is_null_(n) THEN
      RETURN(n.v)
    ENDIF
    
    RETURN(n.v)
  END unwrap_next
`

%define define_unwrap_prev(parent) `
ROUTINE unwrap_prev
  VAR
    n : ITR_TYPE
  BEGIN
    n = prev

    IF is_null_(n) THEN
      RETURN(n.v)
    ENDIF
    
    RETURN(n.v)
  END unwrap_prev
`

%define define_unwrap_from(parent) `
ROUTINE unwrap_from
  BEGIN
    RETURN(n.v)
  END unwrap_from
`

%define define_unwrap(parent) `
ROUTINE unwrap
  VAR
    n : ITR_TYPE
  BEGIN
    n = get

    IF is_null_(n) THEN
      RETURN(n.v)
    ENDIF
    
    RETURN(n.v)
  END unwrap
`

--define tp interface with iterator
%define ITER_TP_VARS `
  func_ : INTEGER
  int_ : ITR_UNWRAP_TYPE
`

%define ITER_TP_INTERFACE `
  --tpe class function
  func_ = tpe__get_int_arg(1)

  SELECT func_ OF
    CASE(ITER_RESET):
      new
    CASE(ITER_PUSH):
      wrap(tpe__get_int_arg(2))
    CASE(ITER_POP):
      int_ = unwrap_pop
      REGMAPPGET
    CASE(ITER_INSERT):
      wrap_insert(tpe__get_int_arg(3), tpe__get_int_arg(2))
    CASE(ITER_GET):
      set_index(tpe__get_int_arg(2))
      int_ = unwrap
      REGMAPPGET
    CASE(ITER_NEXT):
      int_ = unwrap_next
      REGMAPPGET
    CASE(ITER_PREV):
      int_ = unwrap_prev
      REGMAPPGET
    CASE(ITER_NULL):
      registers__set_boolean(tpe__get_int_arg(2), is_null)
    ELSE:
  ENDSELECT
`

%mode pop