PROGRAM test_itr_pth
%NOLOCKGROUP

%include systemlib.types.klt
%include systemvars.klt

--define custom struct
%include default_custom_path.klt
ITER_STRUCT(tstist)

%include kunit.klh
%from pose.klh %import set_config, get_posreg_xyz
%from registers.klh %import get_int, get_real, get_string, get_io

--tsp object
%class tstiti('iteratorpath.klc','iteratorpath.klh','default_int_path.klt')
%class tstiph('iteratorpath.klc','iteratorpath.klh','default_path_path.klt')
%class tstist('iteratorpath.klc','iteratorpath.klh','default_custom_path.klt')

ROUTINE t_is_empty : BOOLEAN
  BEGIN
    tstiti__new
    RETURN(kunit_assert(tstiti__is_empty))
  END t_is_empty

ROUTINE t_iter_pop : BOOLEAN
  VAR
    except : ARRAY[5] OF t_INTEGER
    actual : ARRAY[5] OF t_INTEGER
  BEGIN
    except[1].v = 5; except[2].v = 10; except[3].v = 23; except[4].v = 1; except[5].v = 100


    tstiti__new
    --build
    tstiti__push(except[1])
    tstiti__push(except[2])
    tstiti__push(except[3])
    tstiti__push(except[4])
    tstiti__push(except[5])
    
    actual[1] = tstiti__pop
    actual[2] = tstiti__pop
    actual[3] = tstiti__pop
    actual[4] = tstiti__pop
    actual[5] = tstiti__pop

    RETURN(kunit_eq_int(100, tstiti__unwrap_from(actual[1])) AND kunit_eq_int(1, tstiti__unwrap_from(actual[2])) AND &
           kunit_eq_int(23, tstiti__unwrap_from(actual[3])) AND kunit_eq_int(10, tstiti__unwrap_from(actual[4])) AND &
           kunit_eq_int(5, tstiti__unwrap_from(actual[5])) )
  END t_iter_pop

ROUTINE t_iter_next : BOOLEAN
  VAR
    except : ARRAY[5] OF t_INTEGER
    actual : ARRAY[5] OF t_INTEGER
    i : INTEGER
  BEGIN
    except[1].v = 5; except[2].v = 10; except[3].v = 23; except[4].v = 1; except[5].v = 100

    tstiti__new
    --build
    tstiti__push(except[1])
    tstiti__push(except[2])
    tstiti__push(except[3])
    tstiti__push(except[4])
    tstiti__push(except[5])

    i = 1
    WHILE NOT tstiti__is_null DO
      actual[i] = tstiti__next
      i = i + 1
    ENDWHILE

    RETURN(kunit_eq_int(5, tstiti__unwrap_from(actual[1])) AND kunit_eq_int(10, tstiti__unwrap_from(actual[2])) AND &
           kunit_eq_int(23, tstiti__unwrap_from(actual[3])) AND kunit_eq_int(1, tstiti__unwrap_from(actual[4])) AND &
           kunit_eq_int(100, tstiti__unwrap_from(actual[5])) )
  END t_iter_next

ROUTINE t_iter_prev : BOOLEAN
  VAR
    except : ARRAY[5] OF t_INTEGER
    actual : ARRAY[5] OF t_INTEGER
    i : INTEGER
  BEGIN
    except[1].v = 5; except[2].v = 10; except[3].v = 23; except[4].v = 1; except[5].v = 100

    tstiti__new
    --build
    tstiti__push(except[1])
    tstiti__push(except[2])
    tstiti__push(except[3])
    tstiti__push(except[4])
    tstiti__push(except[5])

    --set to end
    tstiti__set_index(-1)

    i = 1
    WHILE NOT tstiti__is_null DO
      actual[i] = tstiti__prev
      i = i + 1
    ENDWHILE

    RETURN(kunit_eq_int(100, tstiti__unwrap_from(actual[1])) AND kunit_eq_int(1, tstiti__unwrap_from(actual[2])) AND &
           kunit_eq_int(23, tstiti__unwrap_from(actual[3])) AND kunit_eq_int(10, tstiti__unwrap_from(actual[4])) AND &
           kunit_eq_int(5, tstiti__unwrap_from(actual[5])) )
  END t_iter_prev

ROUTINE t_get_set : BOOLEAN
  VAR
    except : ARRAY[5] OF t_INTEGER
    actual : ARRAY[5] OF t_INTEGER
    i : INTEGER
  BEGIN
    except[1].v = 5; except[2].v = 10; except[3].v = 23; except[4].v = 1; except[5].v = 100

    tstiti__new
    --build
    tstiti__push(except[1])
    tstiti__push(except[2])
    tstiti__push(except[3])
    tstiti__push(except[4])
    tstiti__push(except[5])

    --set to end
    tstiti__set_index(-1)
    actual[1] = tstiti__get
    tstiti__set_index(-2)
    actual[2] = tstiti__get
    tstiti__set_index(1)
    actual[3] = tstiti__get
    tstiti__set_index(3)
    actual[4] = tstiti__get
    actual[5] = tstiti__get_index(2)

    RETURN(kunit_eq_int(100, tstiti__unwrap_from(actual[1])) AND kunit_eq_int(1, tstiti__unwrap_from(actual[2])) AND &
           kunit_eq_int(5, tstiti__unwrap_from(actual[3])) AND kunit_eq_int(23, tstiti__unwrap_from(actual[4])) AND & 
           kunit_eq_int(10, tstiti__unwrap_from(actual[5])) )
  END t_get_set


ROUTINE t_it_path : BOOLEAN
  VAR
    except : ARRAY[5] OF XYZWPR
    actual : ARRAY[5] OF XYZWPR
    i : INTEGER
  BEGIN
    except[1] = POS(0,80,0,0,0,0,(ZEROPOS(1).Config_data))
    except[2] = POS(48,64,10,0,0,0,(ZEROPOS(1).Config_data))
    except[3] = POS(77,21,20,0,0,0,(ZEROPOS(1).Config_data))
    except[4] = POS(74,31,30,0,0,0,(ZEROPOS(1).Config_data))
    except[5] = POS(39,-70,40,0,0,0,(ZEROPOS(1).Config_data))

    tstiph__new
    --build
    tstiph__wrap(except[1])
    tstiph__wrap(except[2])
    tstiph__wrap(except[3])
    tstiph__wrap(except[4])
    tstiph__wrap(except[5])

    i = 1
    WHILE NOT tstiph__is_null DO
      actual[i] = tstiph__unwrap_next
      i = i + 1
    ENDWHILE
    
    RETURN(kunit_eq_arp(except, actual))
  END t_it_path

ROUTINE t_it_struct : BOOLEAN
  VAR
    i : INTEGER
    actual : ARRAY[5] OF t_TSTCUSTOM
  BEGIN
    tstist__new

    --build
    tstist__wrap('hello', 1, 3.14, POS(0,80,0,0,0,0,(ZEROPOS(1).Config_data)))
    tstist__wrap('world', 23, 6.28, POS(48,64,10,0,0,0,(ZEROPOS(1).Config_data)))
    tstist__wrap('foo', 70, 2.718, POS(77,21,20,0,0,0,(ZEROPOS(1).Config_data)))
    tstist__wrap('bar', 150, 0.707, POS(74,31,30,0,0,0,(ZEROPOS(1).Config_data)))
    tstist__wrap('baz', -1, 0.5, POS(39,-70,40,0,0,0,(ZEROPOS(1).Config_data)))

    i = 1
    WHILE NOT tstist__is_null DO
      tstist__unwrap_next
      actual[i].str = registers__get_string(1)
      actual[i].reg1 = registers__get_int(2)
      actual[i].reg2 = registers__get_real(3)
      actual[i].pose = pose__get_posreg_xyz(4, 1)

      i = i + 1
    ENDWHILE
    
    RETURN(kunit_eq_str('hello', actual[1].str) AND kunit_eq_int(23, actual[2].reg1) AND &
           kunit_eq_r(2.718, actual[3].reg2) AND kunit_eq_pos(POS(74,31,30,0,0,0,(ZEROPOS(1).Config_data)), actual[4].pose) )
  END t_it_struct

BEGIN
  kunit_test('test is empty', t_is_empty)
  kunit_test('test pop', t_iter_pop)
  kunit_test('test next', t_iter_next)
  kunit_test('test prev', t_iter_prev)
  kunit_test('test get & set', t_get_set)
  kunit_test('test path iterator', t_it_path)
  kunit_test('test path custom struct', t_it_struct)

  --clean up
  tstiti__delete
  tstiph__delete
  tstist__delete

  kunit_done
END test_itr_pth